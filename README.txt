TcpFeatureFinder (TFF)

TFF is an easy-to-use, flexible method for searching the output of tcpflow for a set of features.  In addition to searching for features, TFF will save relevant flows to a new folder and output various reports regarding the TFF run.

TFF uses a simple plugin system to allow users to develop their own source of features to be used in TFF.  See the plugins section for more information on developing your own plugins for TFF, and the plugin.py file in TcpFeatureFinder/tff for a description of the plugin interface.


# Requirements

TFF was developed using Python 3.5.2 on Ubuntu 16.04.  TFF should be compatible with other operating systems, but has not been thoroughly tested.  For a list of python package requirements for tff, see requirements.txt in the TcpFeatureFinder directory.


# Usage

TFF is a simple one-line interface with the following options:

usage: tff.py [-h] [-f F] [-t T] [-d D] [-o O]

Search TCP flows for features.

optional arguments:
  -h, --help  show this help message and exit
  -f F        Path to feature file directory.
  -t T        Path to tcpflows directory
  -d D        Path to output database
  -o O        Path to output directory

The feature file directory contains files pertinent to gathering features by the plugins.  The output of tcpflow should be placed in the tcpflows directory.  The path to the output database designates where the database should be created.  The output directory is where all TFF output will be stored.


# Tcpflows directory

This directory will contain the output of tcpflow.  The default file naming convention must be used in order for TFF to run properly.  Running tcpflow in the following manner will guarantee the output is ready for use with TFF:

tcpflow -r your_network_capture.pcap -o Path/To/TcpFeatureFinder/tcpflow_out


# Output

1. Reports on TFF.  For more information see the Reports section.
2. A sqlite database containing features found. For more information, see the database section.
3. Aggregated tcp flows that contains features.


# Reports

TFF comes standard with 4 types of reports:
1. Feature Type Histogram - A histogram listing the feature types found in tcpflows and the total number of each type found.

2. IP Hist - Histogram of IPs that were associated with found features (either as a source or as a destination) ordered by the number of associated features.

3. IP Report - A detailed report for each IP showing:
        a) the number of features and feature types associated with that IP
        b) a histogram for features found
        c) a histogram for features found with the IP as a source
        d) a histogram for features found with the IP as the destination
        e) a histogram of other IPs who participated in tcpflows with the IP and contained features

4. Tcpflow Report - A report for each tcpflow that contained features with the following:
        a) Source IP
        b) Destination IP
        c) Number of Features Found
        d) Number of Feature Types Found
        e) A histogram of features found


# Activating Reports 

In the config.ini file, make sure that the report type is listed under [reports] in the reports parameter.  Commenting out a report type will deactivate it.


# Custom Reporting

TFF allows for customing reports to be generated by plugins for features associated with that plugin.  For more information, see the plugin.py for documentation on the reporting interface.


# Plugins

TFF allows you to develop your own plugins for extracting features from any location, filter out found features in tcpflows based on context, and generate custom reports.  The python package yapsy is used to support this.  More information of yapsy can be found here:

https://yapsy.readthedocs.io/


# Supplied Plugins

TFF comes default with 3 plugins:
1. bulk_extractor - extracts email, credit card number, search history, and domain features from bulk_extractor output and supplies them to TFF.
2. blacklist - pulls an IP blacklist from the internet and uses the IPs as features for TFF
3. list.txt - reads line-delineated features from a text file


# Activating and Deactivating plugins

Plugin activation is simple.  Simply make sure that the plugin is listed in config.ini under [active_plugins] in the plugins parameter.  Commenting out a plugin name will deactivate it.


# Developing Plugins

Your own plugins may be developed for TFF.  In order to do so, there are several steps you must fullow.

1. Write your plugin.

    The plugin file must go in the plugins folder in the TcpFeatureFile directory.  All plugins must be a class that inherets from the base plugin class found in tff.plugin.py.  This plugin base class defines the minimal interface that you must implement in order for your plugin to work properly with TFF.  Please see plugin.py in the tff folder for complete interface documentation.

2. Write a yapsy-plugin file

    This file is required by the plugin manager, and must share the same name as your plugin module, but with the file extension .yapsy-plugin.  The file will take the following form:

[Core]
Name = feature_name
Module = module_name

[Documentation]
Descrption = plugin description
Author = author
Version = version

3. Add your plugin name to config.ini

Make sure that the plugin name in config.ini matches the name designated in the .yapsy-plugin file



